<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>不忘初心，牢记始终</title>
    <url>/2023/06/06/foreword/</url>
    <content><![CDATA[<p>今后可能会在这里记录自己创造或获得的技术，也可能记录自己对时事的见解，也可能分享自己在兴趣爱好方面的一些尝试，也会放一些精选的拍摄照片。<strong>在这个世界上留下自己的意识，相比物质更能证明自己来过。</strong></p>
<p><em><span id="more"></span></em></p>
<p>本来从2020年考研那时候就有了写博客的习惯，但可惜考完研放飞自我了，并且重装系统的时候把之前写好的博客markdown源文件都弄丢了，所以这一版的博客算是从新开始。希望今后能够好好备份。在如临大敌的时候常常需要可以沉浸的时间来调节自己，写作是一种很好的方式。最重要的是，不谈政治，不谈政治，不谈政治！</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>基于tensorflow的Mnist手写数字识别</title>
    <url>/2023/06/14/technology/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%ABMnist/</url>
    <content><![CDATA[<p>这是一个使用tensorflow进行网络搭建，导入数据集，训练得到模型的一个简单示例，对于深度学习的初学者来说可以完整地体验到训练一个模型的过程。</p>
<p>​	<span id="more"></span></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol>
<li><p>拉取tensorflow镜像(以rocm版本为例)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rocm/tensorflow</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name $(your_container_name) --network=host --device=/dev/kfd --device=/dev/dri --ipc=host --shm-size 16G --group-add video --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v $(your_path):/root rocm/tensorflow</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="获得数据集"><a href="#获得数据集" class="headerlink" title="获得数据集"></a>获得数据集</h1><ol>
<li><p>使用tensorflow提供的工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br></pre></td></tr></table></figure>

<p>有可能会报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError: Descriptors cannot not be created directly.</span><br><span class="line">If this call came from a _pb2.py file, your generated code is out of date and must be regenerated with protoc &gt;= 3.19.0.</span><br><span class="line">If you cannot immediately regenerate your protos, some other possible workarounds are:</span><br><span class="line"> 1. Downgrade the protobuf package to 3.20.x or lower.</span><br><span class="line"> 2. Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python (but this will use pure-Python parsing and will be much slower).</span><br></pre></td></tr></table></figure>

<p>解决办法为重新安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 uninstall protobuf</span><br><span class="line">pip3 install protobuf==3.19.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载数据集并保存为图片，这里创建了一个新的目录，然后将训练集的前十张图片保存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;mnist_images&#x27;</span>):</span><br><span class="line">    os.makedirs(<span class="string">&#x27;mnist_images&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img = Image.fromarray(x_train[i], mode=<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    img.save(<span class="string">f&#x27;mnist_images/<span class="subst">&#123;i&#125;</span>.png&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><h2 id="全连接网络"><a href="#全连接网络" class="headerlink" title="全连接网络"></a>全连接网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">x_train = x_train / <span class="number">255.0</span></span><br><span class="line">x_test = x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    tf.keras.layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">    tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, epochs=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">test_loss, test_acc = model.evaluate(x_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Test accuracy:&#x27;</span>, test_acc)</span><br><span class="line"></span><br><span class="line">y_pred = model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prediction:&quot;</span>, np.argmax(y_pred[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Label:&quot;</span>, y_test[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets, layers, models</span><br><span class="line"></span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">train_images = x_train / <span class="number">255.0</span></span><br><span class="line">test_images = x_test / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line">model.add(layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line">model.add(layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(layers.Flatten())</span><br><span class="line">model.add(layers.Dense(<span class="number">64</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_images.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), y_train, epochs=<span class="number">5</span>,</span><br><span class="line">          validation_data=(test_images.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), y_test))</span><br><span class="line"></span><br><span class="line">model.save(<span class="string">&#x27;./model.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test_loss, test_acc = model.evaluate(test_images.reshape(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), y_test, verbose=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Test accuracy:&#x27;</span>, test_acc)</span><br><span class="line"></span><br><span class="line">y_pred = model.predict(x_test[<span class="number">0</span>].reshape((<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prediction:&quot;</span>, np.argmax(y_pred[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Label:&quot;</span>, y_test[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h1 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h1><p>上述卷积神经网络的训练代码中，将训练的模型存入了文件model.h5当中。使用的时候只要从该文件读入模型，使用同样的方法进行推理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loaded_model = tf.keras.models.load_model(<span class="string">&#x27;model.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">y_pred = loaded_model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Prediction:&quot;</span>, np.argmax(y_pred[i]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Label:&quot;</span>, y_test[i])</span><br></pre></td></tr></table></figure>

<p>这里打印了测试集中的前十个样本的预测值和标签值。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
</search>
